(()=>{"use strict";class t{static patchChildren(t,e,s){t.childNodes.forEach(((t,i)=>{this.patchNode(t,e[i],s[i])})),s.slice(e.length).forEach((e=>{t.appendChild(this.createDOMNode(e))}))}static patchProp(t,e,s,i){if(null!=i&&!1!==i){if(e.startsWith("on")){const o=e.slice(2);return t[o]=i,void(i?s||t.addEventListener(o,this.#t):t.removeEventListener(o,this.#t))}t.setAttribute(e,i)}else t.removeAttribute(e)}static patchProps(t,e,s){const i={...e,...s};Object.keys(i).forEach((i=>{e[i]!==s[i]&&this.patchProp(t,i,e[i],s[i])}))}static patchNode(t,e,s){if(void 0!==s){if("string"==typeof e||"string"==typeof s){if(e!==s){const e=this.createDOMNode(s);return t.replaceWith(e),e}return t}if(e.tagName!==s.tagName){const e=this.createDOMNode(s);return t.replaceWith(e),e}return this.patchProps(t,e.props,s.props),this.patchChildren(t,e.children,s.children),t}t.remove()}static createDOMNode(t){if("string"==typeof t)return document.createTextNode(t);const{tagName:e,props:s,children:i}=t,o=document.createElement(e);return this.patchProps(o,{},s),i.forEach((t=>{o.appendChild(this.createDOMNode(t))})),o}static createVNode(t,e={},s=[]){return{tagName:t,props:e,children:s}}static mount(t,e){return e.replaceWith(t),t}static createVButton(t,e={}){return this.createVNode("button",e,[t])}static patch(t,e){const s=e.v||this.#e(e);return(e=this.patchNode(e,s,t)).v=t,e}static#e(t){if(3===t.nodeType)return t.nodeValue;const e=t.nodeName.toLowerCase(),s=[].map.call(t.childNodes,this.#e);return this.createVNode(e,{},s)}static#t(t){return this[t.type](t)}}const e=Object.freeze({MENU:Symbol("MENU"),GAME:Symbol("GAME")});class s{constructor(t,s){this.app=t,this.state={rows:["Start","Options"]},this.startGame=()=>s.onStateChanged(e.GAME)}onStateChanged(){t.patch(this.createVApp(this.store),this.app)}trigerGlobalEvent(t){}createVApp(){const e=[t.createVButton("Start",{class:"menu__item",onclick:()=>this.startGame()}),t.createVButton("Options",{class:"menu__item",onclick:()=>{console.log("Options click")}})];return t.createVNode("div",{class:"menu",onkeydown:t=>{console.log("KEYDOWN",t)}},e)}setState(t,e){"changeSelectedRow"===t&&(this.state.selectedRow=e,"ArrowUp"===e&&this.state.selectedRow-1<0&&(this.state.selectedRow=this.state.rows.length-1),"ArrowDown"===e&&this.state.selectedRow+1>this.state.rows.length-1&&(this.state.selectedRow=0),this.onStateChanged())}}const i=Object.freeze({RIGHT:Symbol("RIGHT"),LEFT:Symbol("LEFT"),UP:Symbol("UP"),DOWN:Symbol("DOWN")});class o{constructor(t,e){this.width=t,this.height=e}isOutOfGrid(t){return t.x>=this.width||t.y>=this.height||t.y<0||t.x<0}}class r{constructor(t,e){this.gameField=t,this.direction=e,this.nextDirection=e,this.state=[new a(4,5),new a(5,5),new a(6,5)]}isSnakeCoordinate(t){return!!this.state.filter((e=>e.isEqual(t))).length}isReverseDirection(t){return t===i.DOWN?this.direction===i.UP:t===i.UP?this.direction===i.DOWN:t===i.LEFT?this.direction===i.RIGHT:t===i.RIGHT?this.direction===i.LEFT:void 0}getNextCoordinate(){let t;const e=this.state[this.state.length-1];switch(this.nextDirection){case i.RIGHT:t=new a(e.x+1,e.y);break;case i.LEFT:t=new a(e.x-1,e.y);break;case i.UP:t=new a(e.x,e.y-1);break;case i.DOWN:t=new a(e.x,e.y+1);break;default:return console.error("Wrong direction ",direction),!1}return t}move(){const t=this.getNextCoordinate(this.direction);return!!this.canGoCoordinate(t)&&(this.state.shift(),this.state.push(t),!0)}canGoDirection(t){return!this.isReverseDirection(t)}canGoCoordinate(t){return!this.isSnakeCoordinate(t)}setNewDirection(t){this.nextDirection=t}updateDirection(){this.direction=this.nextDirection}add(){const t=this.getNextCoordinate(this.direction);return!!this.canGoCoordinate(t)&&(this.state.push(t),!0)}}class a{constructor(t,e){this.x=t,this.y=e}isEqual(t){return this.x===t.x&&this.y===t.y}}class n{constructor(t,e,s,a){this.gridField=new o(t,e),this.snake=new r(this.gridField,i.RIGHT),this.food=this.getFoodPosition(),this.isGameOver=!1,this.app=s,this.interval}onStateChanged(){t.patch(this.createVApp(),this.app)}startGame(t){this.app=t,this.interval=setInterval((()=>{this.updateState(),this.isGameOver&&window.clearInterval(this.interval)}),500)}setDirection(t){this.snake.canGoDirection(t)&&this.snake.setNewDirection(t)}getFoodPosition(){let t;do{const e=h(11),s=h(11);t=new a(e,s)}while(this.snake.isSnakeCoordinate(t));return t}updateState(){const t=this.snake.getNextCoordinate();this.snake.isSnakeCoordinate(t)||this.gridField.isOutOfGrid(t)?this.isGameOver=!0:(this.snake.updateDirection(),this.food.isEqual(t)?(this.snake.add(),this.food=this.getFoodPosition()):this.snake.move(),console.log("game",this.app),this.onStateChanged())}createVApp(){return this.isGameOver?this.getGameOverView():this.getGameView()}getGameView(){const e=[];for(let s=0;s<this.gridField.height;s++){const i=[];for(let e=0;e<this.gridField.width;e++){const o={};s===this.food.y&&e===this.food.x&&(o.class="food"),i.push(t.createVNode("td",o))}e.push(t.createVNode("tr",{},i))}return this.snake.state.forEach(((t,s,i)=>{const o=s===i.length-1;e[t.y].children[t.x].props.class=o?"snakeHead":"snakeBody"})),t.createVNode("table",{id:"gameGrid"},e)}getGameOverView(){return t.createVNode("p",{class:"gameOver"},"Game over")}}function h(t){return Math.floor(Math.random()*t)}const c=new class{constructor(){this.state=e.MENU,this.app=document.getElementById("root"),this.views={[e.MENU]:new s(this.app,this),[e.GAME]:new n(11,11,this.app,this)},this.onStateChanged(e.MENU)}onStateChanged(t){this.state=t,this.renderViewByState()}renderViewByState(){const s=this.views[this.state].createVApp();this.app=t.patch(s,this.app),this.state===e.GAME&&this.views[e.GAME].startGame(this.app),console.log("main",this.app)}trigerGlobalEvent(t){this[this.state].trigerGlobalEvent(t)}};window.addEventListener("onkeydown",(t=>{console.log("onkeydown global",t),c.trigerGlobalEvent(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,