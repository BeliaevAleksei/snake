(()=>{"use strict";class t{static patchChildren(t,e,s){t.childNodes.forEach(((t,a)=>{this.patchNode(t,e[a],s[a])})),s.slice(e.length).forEach((e=>{t.appendChild(this.createDOMNode(e))}))}static patchProp(t,e,s,a){if(null!=a&&!1!==a){if(e.startsWith("on")){const r=e.slice(2);return t[r]=a,void(a?s||t.addEventListener(r,this.#t):t.removeEventListener(r,this.#t))}t.setAttribute(e,a)}else t.removeAttribute(e)}static patchProps(t,e,s){const a={...e,...s};Object.keys(a).forEach((a=>{e[a]!==s[a]&&this.patchProp(t,a,e[a],s[a])}))}static patchNode(t,e,s){if(void 0!==s){if("string"==typeof e||"string"==typeof s){if(e!==s){const e=this.createDOMNode(s);return t.replaceWith(e),e}return t}if(e.tagName!==s.tagName){const e=this.createDOMNode(s);return t.replaceWith(e),e}return this.patchProps(t,e.props,s.props),this.patchChildren(t,e.children,s.children),t}t.remove()}static createDOMNode(t){if("string"==typeof t)return document.createTextNode(t);const{tagName:e,props:s,children:a}=t,r=document.createElement(e);return this.patchProps(r,{},s),a.forEach((t=>{r.appendChild(this.createDOMNode(t))})),r}static createVNode(t,e={},s=[]){return{tagName:t,props:e,children:s}}static mount(t,e){return e.replaceWith(t),t}static patch(t,e){const s=e.v||this.#e(e);return(e=this.patchNode(e,s,t)).v=t,e}static#e(t){if(3===t.nodeType)return t.nodeValue;const e=t.nodeName.toLowerCase(),s=[].map.call(t.childNodes,this.#e);return this.createVNode(e,{},s)}static#t(t){return this[t.type](t)}}class e{constructor(t){this.app=t,this.state={selectedRow:0,rows:["Start","Options"]}}onStateChanged(){t.patch(this.createVApp(this.store),this.app)}createVApp(){const{selectedRow:e,rows:s}=this.state,a=s.map(((s,a)=>{const r=a===e?"menu__item menu__item_selected":"menu__item";return t.createVNode("p",{class:r,tabindex:1,onclick:t=>{this.setState("changeSelectedRow",a)}},[s])}));return t.createVNode("div",{class:"menu",onkeydown:t=>{console.log("KEYDOWN",t)}},a)}setState(t,e){"changeSelectedRow"===t&&(this.state.selectedRow=e,"ArrowUp"===e&&this.state.selectedRow-1<0&&(this.state.selectedRow=this.state.rows.length-1),"ArrowDown"===e&&this.state.selectedRow+1>this.state.rows.length-1&&(this.state.selectedRow=0),this.onStateChanged())}}Object.freeze({RIGHT:Symbol("RIGHT"),LEFT:Symbol("LEFT"),UP:Symbol("UP"),DOWN:Symbol("DOWN")});const s=Object.freeze({MENU:Symbol("MENU"),GAME:Symbol("GAME")});new class{constructor(){this.state=s.MENU,this.app=document.getElementById("root"),this[s.MENU]=new e(this.app);const a=this[this.state].createVApp();this.app=t.patch(a,this.app)}onStateChanged(){this[this.state].createVApp(),t.patch(createVApp(this.store),app)}setState(t){this.state=t,this.onStateChanged()}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,